#calibrate
chrono_data$curve <- cal_curve
calRaw <- rcarbon::calibrate(chrono_data[, 1], errors = chrono_data[, 2], calCurves = chrono_data[, 3], timeRange = c(upper14C, 0), F14C = TRUE, eps = 0)
chrono_data <- matrix(NA, nrow = nrow(chrono_data), ncol = 2) #repository of calibrated point estimates of radiocarbon dates
for (i_date in 1:length(calRaw)) {
cal_date <- as.numeric(data.frame(calRaw$grids[i_date])[, 1]) #get calibrated values
cal_probs <- as.numeric(data.frame(calRaw$grids[i_date])[, 2]) #get PDF
cal_w_mean <- round(sum(cal_date * cal_probs), 0) #estimate calibrated weighted mean
cal_w_sd <- round(sqrt(sum(((cal_date - cal_w_mean) ^ 2) * cal_probs)), 0) #estimate calibrated weighted sd
chrono_data[i_date, ] <- c(cal_w_mean, cal_w_sd) #store cal weighted mean and sd
# message(paste("date", i_date))
}
chrono_data <- data.frame(as.numeric(chrono_data[, 1]), as.numeric(chrono_data[, 2])) #dataframe repository and coerce mean and sd to numeric
colnames(chrono_data) <- c("age", "sd") #rename columns
#rbind calibrated radiocarbon dates with non-radiocarbon dates, re-order by row number and assign data to data.table object
if (is.numeric(radiocarbon[1]) == TRUE & radiocarbon[1] != 0) {
rownames(chrono_data) <- radiocarbon #row number for radiocarbon dates
chrono_data <- data.frame(rbind(chrono_data, dat1)) #rbind radiocarbon and non-radiocarbon dates
chrono_data <- data.table::data.table(chrono_data[order(as.numeric(rownames(chrono_data))), ]) #get original row order
rm(dat1) #remove object
}
#create object for output file when at least one date is radiocarbon
dat_cal <- data.table::data.table(chrono_data)
rm(calRaw, cal_date, cal_probs, cal_w_mean, cal_w_sd) #clean space from R environment
}
#assign data to data.table object when all input dates are calibrated
if (isFALSE(calibra)) {
chrono_data <- data.table::data.table(chrono_data)
colnames(chrono_data) <- c("age", "sd") #rename columns
dat_cal <- chrono_data #create object for output file
}
#assign data to data.table object when no input dates are calibrated or radiocarbon
if (is.character(radiocarbon[1]) == TRUE | radiocarbon[1] == 0) {
chrono_data <- data.table::data.table(chrono_data)
}
# SORT data
if (signor_lipps == "ext") {chrono_data <- chrono_data[order(chrono_data[, 1], decreasing = FALSE), c(1:2)]} #extinction
if (signor_lipps == "inv") {chrono_data <- chrono_data[order(chrono_data[, 1], decreasing = TRUE), c(1:2)]} #invasion
# MESSAGE calibration options to console
if (isTRUE(calibra) & is.character(radiocarbon[1])) {
message(paste("Non-calibrated radiocarbon dates calibrated in calendar years Before Present with ", cal_curve, sep = ""), "\n")
}
if (isTRUE(calibra) & is.numeric(radiocarbon[1]) & radiocarbon[1] != 0) {
message(paste("Non-calibrated radiocarbon dates calibrated in calendar years Before Present with ", cal_curve, sep = ""), "\n")
}
if (isTRUE(calibra) & radiocarbon[1] == 0) {
message("Radiocarbon calibration requested (calibra = TRUE) but all records assumed to be in calendar years Before Present (radiocarbon = 0), so calibration not implemented \n")
}
if (isFALSE(calibra) & is.numeric(radiocarbon[1]) & radiocarbon[1] != 0) {
message("Radiocarbon calibration not requested (calibra = FALSE). Since input data contains radiocarbon and non-radiocarbon dates, all dates assumed to be in calendar years Before Present\n")
}
##############################################
## MESSAGE GRIWM PARAMETERS TO CONSOLE
message("########GRIWM re-sampling started\n")
if (signor_lipps == "ext") {
message(paste("Extinction time (signor_lipps == 'ext') from ", resample, " re-sampled estimates (resample = ", resample, ")", sep = ""), "\n")
}
if (signor_lipps == "inv") {
message(paste("Invasion time (signor_lipps == 'inv') from ", resample, " re-sampled estimates (resample = ", resample, ")", sep = ""), "\n")
}
if (isTRUE(biased)) {
message(paste("Biased estimator applied (biased = TRUE) for alpha = ", alpha, " (alpha = ", alpha, ")" , sep = ""), "\n")
} else {
message("Unbiased estimator applied (biased = FALSE)\n")
}
## COMPUTE GRIWM
# VECTORIZE data, set griwm parameters, define output repositories
# datF <- c(chrono_data[, 1])$age #get dates
# sd.vec <- c(chrono_data[, 2])$sd #get errors
datF <- data.frame(chrono_data)$age #get dates
sd.vec <- data.frame(chrono_data)$sd #get errors
rm(chrono_data) #remove data object
k <- length(datF) #get number of dates
out <- matrix(0, 1, 3) #create repository of final griwm results
T.up.vec <- T.mci.vec <- w.T.mci.vec <- rep(0, resample) #create repository of temporal griwm results
# LOOP re-sampling
#set progress bar
pb <- txtProgressBar(min = 1, max = resample, style = 3)
#run loop
for (i_iter in 1:resample) { #loop over i_iter iterations (default = 10000)
#run progress bar
setTxtProgressBar(pb = pb, i_iter)
#fix random generator
set.seed(i_iter)
#re-sample one value from each of the k dates and store in vector date.samp = re-sampled time series
date.samp <- rep(0,k) #repository of re-sampled dates
for (i_resample in 1:k) { #loop over k dates
date.samp[i_resample] <- round(rnorm(1, datF[i_resample], sd.vec[i_resample]))
}
#set estimate: extinction versus invasion
if (signor_lipps == "ext") {date.samp <- sort(date.samp)}
if (signor_lipps == "inv") {date.samp <- sort(date.samp, decreasing = TRUE)}
#estimate weights per date
last.diff <- 1 / (date.samp - date.samp[1])[-1]
weight <- last.diff / last.diff[1]
if (last.diff[1] == Inf) {
weight <- last.diff / last.diff[2]
weight <- weight[-1]
}
#estimate extinction or invasion parameters
ldate <- length(date.samp)
T.mci.lst.vec <- rep(0, ldate - 1)
for (i_griwm in 1:(ldate-1)) { #loop over ldate = k - 1 dates
date.it <- date.samp[1:(1 + i_griwm)]
date.age.it <- date.samp[1:(1 + i_griwm)]
date.mci.it <- rev(max(date.it) + 1 - date.it)
k <- length(date.it)
t.n <- date.mci.it[k]
n <- k
T.rng <- t.n - date.mci.it[1]
#biased versus unbiased estimate
if (isTRUE(biased)) {
i = t.n - t.n * log(alpha) / n #GRIWM biased estimate (original)
}
if (isFALSE(biased)) {
i = t.n * (n + 1) / n #GRIWM unbiased estimate
}
T.mci.lst.vec[i_griwm] <- max(date.it) + 1 - i
}
#inverse-weight dates
if (last.diff[1] == Inf) {
w.T.mci.vec[i_iter] <- round((sum(weight * T.mci.lst.vec[-1])) / sum(weight), 0)
}
if (last.diff[1] != Inf) {
w.T.mci.vec[i_iter] <- round((sum(weight * T.mci.lst.vec)) / sum(weight), 0)
}
}
#close progress bar
close(pb)
# CALCULATE median extinction (or invasion) time and 95% CI
T.wmci.vec.CI <- quantile(na.omit(w.T.mci.vec), probs = c(0.025, 0.5, 0.975));
out[1] <- round(T.wmci.vec.CI[1], 0) #2.5% quartile (lower CI bound)
out[2] <- round(T.wmci.vec.CI[2], 0) #50% quartile (median)
out[3] <- round(T.wmci.vec.CI[3], 0) #97.5% quartile (upper CI bound)
out <- data.frame(out) #convert to dataframe
#convert BP = Before Present
outBCE <- out - 1949 #to BCE = Before Current Era
outBCY <- out  + as.numeric(format(Sys.Date(), "%Y")) - 1950 #to BCY = Before Current Year
out <- data.frame(rbind(outBCE, out, outBCY)) #data.frame the three time scales
out
if (signor_lipps == "ext") {rownames(out) <- c("Extinction_Time_BCE", "Extinction_Time_BP", "Extinction_Time_BCY")}
if (signor_lipps == "inv") {rownames(out) <- c("Invasion_Time_BCE", "Invasion_Time_BP", "Invasion_Time_BCY")}
colnames(out) <- c("2.5CI", "median", "97.5CI")
# REMOVE GRIWM loop inputs from console
rm(datF, sd.vec, k, date.samp, last.diff, weight, ldate, date.it, date.age.it, date.mci.it, t.n, n, T.rng, outBCE, outBCY)
# MESSAGE end of computations
message("\n")
message("########GRIWM re-sampling ended\n")
if (signor_lipps == "ext") {message("GRIWM extinction time reported in calendar years BP, BCE and BCY\n")}
if (signor_lipps == "inv") {message("GRIWM invasion time reported in calendar years BP, BCE and BCY\n")}
message("BP = Before Present (Present = year 1950)\n")
message("BCE = Before Current Era (Current Era starts at year 0)\n")
message(paste("BCY = Before Current Year (Current Year = ", as.numeric(format(Sys.Date(), "%Y")), ")", sep = ""), "\n")
if (signor_lipps == "ext") {message("Note = extinction time in BP or BCE will be negative if earlier than 1950 or 0, respectively\n")}
if (signor_lipps == "inv") {message("Note = invasion time in BP or BCE will be negative if earlier than 1950 or 0, respectively\n")}
##############################################
## SAVE GRIWM MEDIAN EXTINCTION (OR INVASION) TIME AND 95% CI
if (griwm_save == TRUE & signor_lipps == "ext") {
data.table::fwrite(x = out, file = "outputGRIWM_medianCI_Extinction", col.names = TRUE)
message("Median extinction time and 95% confidence interval saved to working directory (griwm_save = TRUE) with file name = outputGRIWM_medianCI_Extinction\n")
}
if (griwm_save == TRUE & signor_lipps == "inv") {
data.table::fwrite(x = out, file = "outputGRIWM_medianCI_Invasion", col.names = TRUE)
message("Median invasion time and 95% confidence interval saved to working directory (griwm_save = TRUE) with file name = outputGRIWM_medianCI_Invasion\n")
}
##############################################
## SAVE RE-SAMPLED EXTINCTION (OR INVASION) TIMES
if (signor_lipps == "ext" & isTRUE(resample_save)) {
data.table::fwrite(x = data.frame(w.T.mci.vec), file = "outputGRIWM_resampled_Extinction", col.names = FALSE)
message("Re-sampled extinction times saved to working directory (resample_save = TRUE) with file name = outputGRIWM_resampled_Extinction\n")
}
if (signor_lipps == "inv" & isTRUE(resample_save)) {
data.table::fwrite(x = data.frame(w.T.mci.vec), file = "outputGRIWM_resampled_Invasion", col.names = FALSE)
message("Re-sampled invasion times saved to working directory (resample_save = TRUE) with file name = outputGRIWM_resampled_Invasion\n")
}
# REMOVE GRIWM loop outputs from console
rm(T.up.vec, T.mci.vec, w.T.mci.vec, T.wmci.vec.CI, T.mci.lst.vec) #remove GRIWM outputs from console
# CREATE vector assigning dates to radiocarbon or non-radiocarbon dating
if (is.character(radiocarbon) == TRUE) {chrono_type <- rep("radiocarbon", dateN)}
if (is.numeric(radiocarbon) == TRUE & radiocarbon[1] != 0) {
chrono_type <- rep("non-radiocarbon", dateN)
chrono_type[radiocarbon] <- "radiocarbon"
}
if (radiocarbon[1] == 0) {chrono_type <- rep("non-radiocarbon", dateN)}
#coerce input data to NA calibrated dates present
if (radiocarbon[1] == 0) {dat_uncal[c(1:dateN),] <- NA} #all calibrated dates coerced to NA in dat_uncal
if (is.numeric(radiocarbon[1]) & radiocarbon[1] != 0) {non_radiocarbon <- setdiff(c(1:dateN), radiocarbon); dat_uncal[non_radiocarbon, ] <- NA} #only calibrated dates coerced to NA  in dat_uncal
if (is.character(radiocarbon[1])) {dat_uncal <- dat_uncal} #no dates coerced to NA  in dat_uncal
#save calibration object
# calibration <- data.table::data.table(uncal.age = dat_uncal[, 1], uncal.sd = dat_uncal[, 2], cal = dat_cal[, 1], cal = dat_cal[, 2], type = chrono_type)
calibration <- data.frame(data.table::data.table(uncal.age = dat_uncal[, 1], uncal.sd = dat_uncal[, 2], cal = dat_cal[, 1], cal = dat_cal[, 2], type = chrono_type))
calibration
calibration[order(calibration$cal.age),]
calibration <- calibration[order(calibration$cal.age),] #order from younger to older dates
if (isTRUE(cal_save) & radiocarbon[1] != 0) { #save non-calibrated and calibrated dates
data.table::fwrite(x = data.frame(calibration), file = "outputGRIWM_calibration", col.names = TRUE)
message("Dates in years and calendar years saved to working directory (cal_save = TRUE) with file name = outputGRIWM_calibration\n")
}
if (isTRUE(cal_save) & radiocarbon[1] == 0) { #save calibrated dates
data.table::fwrite(x = data.frame(calibration)[,c(3:5)], file = "outputGRIWM_calibration", col.names = TRUE)
message("All input dates were in calendar years (radiocarbon = 0) and have been saved to working directory (cal_save = TRUE) with file name = outputGRIWM_calibration\n")
}
# ASSIGN calibrated results to object calibration, and (if requested) save object to working directory
if (isTRUE(calibra)) { #calibration requested
#coerce input data to NA calibrated dates present
if (radiocarbon[1] == 0) {dat_uncal[c(1:dateN),] <- NA} #all calibrated dates coerced to NA in dat_uncal
if (is.numeric(radiocarbon[1]) & radiocarbon[1] != 0) {non_radiocarbon <- setdiff(c(1:dateN), radiocarbon); dat_uncal[non_radiocarbon, ] <- NA} #only calibrated dates coerced to NA  in dat_uncal
if (is.character(radiocarbon[1])) {dat_uncal <- dat_uncal} #no dates coerced to NA  in dat_uncal
#save calibration object
# calibration <- data.table::data.table(uncal.age = dat_uncal[, 1], uncal.sd = dat_uncal[, 2], cal = dat_cal[, 1], cal = dat_cal[, 2], type = chrono_type)
calibration <- data.frame(data.table::data.table(uncal.age = dat_uncal[, 1], uncal.sd = dat_uncal[, 2], cal = dat_cal[, 1], cal = dat_cal[, 2], type = chrono_type))
calibration <- calibration[order(calibration$cal.age),] #order from younger to older dates
if (isTRUE(cal_save) & radiocarbon[1] != 0) { #save non-calibrated and calibrated dates
data.table::fwrite(x = data.frame(calibration), file = "outputGRIWM_calibration", col.names = TRUE)
message("Dates in years and calendar years saved to working directory (cal_save = TRUE) with file name = outputGRIWM_calibration\n")
}
if (isTRUE(cal_save) & radiocarbon[1] == 0) { #save calibrated dates
data.table::fwrite(x = data.frame(calibration)[,c(3:5)], file = "outputGRIWM_calibration", col.names = TRUE)
message("All input dates were in calendar years (radiocarbon = 0) and have been saved to working directory (cal_save = TRUE) with file name = outputGRIWM_calibration\n")
}
}
if (isFALSE(calibra)) { #calibration not requested
calibration <- data.table::data.table(cal = dat_cal[, 1], cal = dat_cal[, 2], type = chrono_type)
calibration <- calibration[order(calibration$cal.age),] #order from younger to older dates
if (isTRUE(cal_save)) { #save calibrated dates
data.table::fwrite(x = data.frame(calibration), file = "outputGRIWM_calibration", col.names = TRUE)
message("All input dates are in calendar years (calibra = FALSE) and have been saved to working directory (cal_save = TRUE) with file name = outputGRIWM_calibration\n")
}
}
##############################################
## PRINT RESULTS TO CONSOLE AND CLEAN R ENVIRONMENT
if (signor_lipps == "ext") {message(paste("########GRIWM-extinction analysis ended / Time = ", date(), "\n"))}
if (signor_lipps == "inv") {message(paste("########GRIWM-invasion analysis ended / Time = ", date(), "\n"))}
out <- list(griwm_arguments = griwm_args, calibration_BP = calibration, griwm = out)
out
#load package then try functions
devtools::load_all()
griwm("lama.txt")
#load package then try functions
devtools::load_all()
griwm("lama.txt")
griwm("lama.txt")
devtools::load_all()
devtools::load_all()
griwm("lama.txt")
devtools::load_all()
griwm("lama.txt")
devtools::load_all()
griwm("lama.txt")
criwm("lama.txt")
criwm("lama.txt", calibra = FALSE)
criwm("lama.txt", radiocarbon = "none")
criwm("lama.txt", radiocarbon = "0")
criwm("lama.txt", radiocarbon = 0)
criwm("lama.txt", radiocarbon = c(1:5, 9))
roxygen2::roxygenize()
# Iterate check with roxyenize / will create manuals in MAN, and modify DESCRIPTION and NAMESPACE
devtools::check()
# Iterate check with roxyenize / will create manuals in MAN, and modify DESCRIPTION and NAMESPACE
devtools::check()
#Submit to CRAN
#Verification 1
devtools::check_rhub()
#Submit to CRAN
#Verification 1
devtools::check_rhub()
#load package then try functions
devtools::load_all()
calendar("data2.txt")
calendar("dat2.txt")
calendar("dat3.txt")
griwm("dat1.txt")
criwm("dat1.txt")
getwd()
setwd("C:/Users/Marcos/Desktop/mega14C")
setwd("C:/Users/Marcos/Desktop/mega14C"); getwd()
?fread
data.table::fread("mega14C.txt", col.names = TRUE)
data.table::fread(input = "mega14C.txt", col.names = TRUE)
data.table::fread(input = "mega14C.txt", col.names = TRUE, dec = ",")
read.table(input = "mega14C.txt", col.names = TRUE, dec = ",")
read.table("mega14C.txt", col.names = TRUE, dec = ",")
?read.table
read.table("mega14C.txt", header = TRUE, dec = ",")
read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
mega <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
dim(mega)
summary(mega)
names(mega)
#number of records
dim(mega)
#number of records
dim(mega)[1]
names(mega)
#number of megafauna records
#number of records
table(fauna)
#number of megafauna records
#number of records
table(mega$fauna)
table(mega$fauna)/dim(mega)[1]
#number of extinct
table(mega$status)
table(mega$status)/dim(mega)[1]
#number of extinct
table(mega$status); sum(table(mega$status))
#number of megafauna records
table(mega$fauna) / sum(table(mega$status))
#number of megafauna records
table(mega$fauna) / sum(table(mega$fauna))
table(mega$fauna)
#number of megafauna records
table(mega$fauna) / sum(table(mega$fauna))
table(mega$fauna)
table(mega$fauna)[1]
sum(table(mega$fauna))
#number of megafauna records
table(mega$fauna) / sum(table(mega$fauna))
#number of megafauna records
table(mega$fauna); sum(table(mega$fauna))
#number of extinct
table(mega$status); sum(table(mega$status))
table(mega$status)/dim(mega)[1]
#number of megafauna records
table(mega$fauna); sum(table(mega$fauna))
#number of megafauna records
table(mega$fauna); sum(table(mega$fauna))
table(mega$fauna)/dim(mega)[1]
sum(table(mega$fauna)) - dim(mega)[1]
dim(mega)[1] - sum(table(mega$fauna)); (dim(mega)[1] - sum(table(mega$fauna)))/dim(mega)[1]
#number of extinct
table(mega$status); sum(table(mega$status))
table(mega$status)/dim(mega)[1]
dim(mega)[1] - sum(table(mega$status)); (dim(mega)[1] - sum(table(mega$status)))/dim(mega)[1]
names(mega)
#numbers by region
table(mega$bioregion); sum(table(mega$bioregion))
table(mega$bioregion)/dim(mega)[1]
100*table(mega$bioregion)/dim(mega)[1]
numR <- 100*table(mega$bioregion)/dim(mega)[1]; numR
numR["Canada"]
numR["Canada", "USA", "E_Beringia"]
numR[c("Canada", "USA", "E_Beringia")]
numR[c("Canada", "USA", "E_Beringia")]; sum(numR[c("Canada", "USA", "E_Beringia")])
numR[c("Canada", "USA", "E_Beringia")]; sum(numR[c("Canada", "USA", "E_Beringia")])
100-numR
100-numR
100-sum(numR)
america <- numR[c("Canada", "USA", "E_Beringia")]; sum(america)
100-sum(america)
numR <- 100*table(mega$bioregion)/dim(mega)[1]; numR
russia <- numR[c("Russia", "W_Beringia")]; sum(russia)
russia <- numR[c("Russia/Siberia", "W_Beringia")]; sum(russia)
usa <- numR[c("USA")]; sum(usa)
canada <- numR[c("Canada")]; sum(canada)
eb <- numR[c("E_beringia")]; sum(eb)
eb <- numR[c("E_Beringia")]; sum(eb)
wb <- numR[c("W_Beringia")]; sum(wb)
names(mega)
#number of records by chemistry
table(mega$chemistry)
100*table(mega$chemistry)/dim(mega)[1]
#number of records by chemistry
table(mega$chemistry, mega$bioregion)
100*table(mega$chemistry, mega$bioregion)/dim(mega)[1]
round(100*table(mega$chemistry, mega$bioregion)/dim(mega)[1], 1)
table(mega$chemistry, mega$bioregion)[2]
table(mega$chemistry, mega$bioregion)[2,]
uf <- table(mega$chemistry, mega$bioregion)[2,]; uf
uf <- table(mega$chemistry, mega$bioregion)[2,]; uf; sum(uf)
uf["Europe", "Russia/Siberia", "W_Beringia"]
uf[c("Europe", "Russia/Siberia", "W_Beringia")]
sum(uf[c("Europe", "Russia/Siberia", "W_Beringia")])/sum(uf)
sum(uf[c("Europe", "Russia/Siberia", "W_Beringia", "Arabia/Asia")])/sum(uf)
xad <- table(mega$chemistry, mega$bioregion)[2,]; xad; sum(xad)
table(mega$chemistry, mega$bioregion)
xad <- table(mega$chemistry, mega$bioregion)[3,]; xad; sum(xad)
xad[c("USA", "Canada", "E_Beringia")]
sum(xad[c("USA", "Canada", "E_Beringia")])/sum(xad)
hyp <- table(mega$chemistry, mega$bioregion)[1,]; hyp; sum(hyp)
#number of records by chemistry
table(mega$chemistry)
names(mega)
#number of records by lab
table(mega$code)
#number of records by lab
table(mega$code, mega$chemistry)
40/45
table(mega$code, mega$chemistry)[1]
table(mega$code, mega$chemistry)[1,]
#number of records by lab
table(mega$code, mega$chemistry)
row.names(table(mega$code, mega$chemistry))
which(row.names(table(mega$code, mega$chemistry)) %in% c("AA"))
which(row.names(table(mega$code, mega$chemistry)) %in% c("AA", "Beta", "CURL"))
#number of records by lab
which(mega$code == "OXA")
#####################################################################################################################
## RUN EXAMPLE
rm(list=ls(all=TRUE))
setwd("C:/Users/Marcos/Desktop/mega14C"); getwd()
mega <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
summary(mega)
names(mega)
#number of records
dim(mega)[1]
#number of records by chemistry
table(mega$chemistry)
100*table(mega$chemistry)/dim(mega)[1]
#number of records by chemistry
table(mega$chemistry, mega$bioregion)
round(100*table(mega$chemistry, mega$bioregion)/dim(mega)[1], 1)
#number of records by lab
table(mega$code, mega$chemistry)
#number of records by lab
table(mega$code, mega$chemistry)
which(row.names(table(mega$code, mega$chemistry))
%in% c("AA", "Beta", "CURL", "DAMS", "LLNL", "OS", "RIDDL", "TO", "UCIAMS"))
amC <- which(row.names(table(mega$code, mega$chemistry))
%in% c("AA", "Beta", "CURL", "DAMS", "LLNL", "OS", "RIDDL", "TO", "UCIAMS"))
table(mega$code, mega$chemistry)[amC]
table(mega$code, mega$chemistry)[amC,]
# orau
orauC <- which(row.names(table(mega$code, mega$chemistry))
%in% c("OxA"))
orauC
table(mega$code, mega$chemistry)[orauC,]
table(mega$code, mega$chemistry)[orauC,2]/sum(table(mega$code, mega$chemistry)[orauC,])
#number of records by chemistry
table(mega$chemistry, mega$bioregion)
#number of records by lab
table(mega$code, mega$chemistry)
apply(table(mega$code, mega$chemistry), 1, sum)
sort(apply(table(mega$code, mega$chemistry), 1, sum))
625/818
304+85
304+185
304/489
5  166 27
166/198
27/198
5/198
#species
table(mega$species)
#species
table(mega$genus, mega$species)
#species
table(mega$species, mega$genus)
table(mega$family)
data.frame(table(mega$family))
sort(data.frame(table(mega$family)))
fam <- data.frame(table(mega$family))
fam <- data.frame(table(mega$family)); fam
?sort
fam[sort(Freq),]
fam[sort(fam$Freq),]
fam <- data.frame(table(mega$family)); fam
fam[sort(fam$Freq),]
fam <- data.frame(table(mega$family)); fam; class(fam)
ord <- data.frame(table(mega$ordily)); ord; class(ord)
ord[sort(ord$Freq), ]
ord <- data.frame(table(mega$order)); ord; class(ord)
ord[sort(ord$Freq), ]
#bioregion
table(mega$bioregion); sum(table(mega$bioregion))
ord$Freq
ord <- data.frame(table(mega$order)); ord; class(ord)
ord[sort(ord$Freq), ]
#####################################################################################################################
## RUN EXAMPLE
rm(list=ls(all=TRUE))
setwd("C:/Users/Marcos/Desktop/mega14C"); getwd()
mega <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
summary(mega)
names(mega)
#number of records
dim(mega)[1]
table(megafauna$source)
table(mega$source)
sum(table(mega$source))
#number of records
dim(mega)[1]
#####################################################################################################################
## RUN EXAMPLE
rm(list=ls(all=TRUE))
setwd("C:/Users/Marcos/Desktop/mega14C"); getwd()
mega <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
summary(mega)
names(mega)
megaT <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
summary(megaT)
names(megaT)
dim(megaT); mega <- megaT[mega$guthrie == "No",]; dim(mega)
dim(megaT); mega <- megaT[mega$guthrie == "no",]; dim(mega)
dim(megaT); mega <- megaT[megaT$guthrie == "no",]; dim(mega)
#####################################################################################################################
## RUN EXAMPLE
rm(list=ls(all=TRUE))
setwd("C:/Users/Marcos/Desktop/mega14C"); getwd()
# data.table::fread(input = "mega14C.txt", col.names = TRUE, dec = ",")
megaT <- read.table("mega14C.txt", header = TRUE, dec = ",", sep ="\t")
summary(megaT)
names(megaT)
dim(megaT); mega <- megaT[megaT$guthrie == "no",]; dim(mega)
#number of records
dim(mega)[1]
#number of megafauna records
table(mega$fauna); sum(table(mega$fauna))
install.packages("moments")
install.packages("roxygen2")
#load package then try functions
devtools::load_all()
